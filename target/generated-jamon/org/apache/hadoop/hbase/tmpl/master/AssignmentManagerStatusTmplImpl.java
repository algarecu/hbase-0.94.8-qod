// Autogenerated Jamon implementation
// /Users/algarecu/Documents/workspace/hbase-workspace/hbase-0.94.8-latest/src/main/jamon/org/apache/hadoop/hbase/tmpl/master/AssignmentManagerStatusTmpl.jamon

package org.apache.hadoop.hbase.tmpl.master;

// 21, 1
import org.apache.hadoop.hbase.HRegionInfo;
// 22, 1
import org.apache.hadoop.hbase.master.AssignmentManager;
// 23, 1
import org.apache.hadoop.hbase.master.AssignmentManager.RegionState;
// 24, 1
import java.util.Iterator;
// 25, 1
import java.util.Map;

public class AssignmentManagerStatusTmplImpl
  extends org.jamon.AbstractTemplateImpl
  implements org.apache.hadoop.hbase.tmpl.master.AssignmentManagerStatusTmpl.Intf

{
  private final AssignmentManager assignmentManager;
  private final int limit;
  protected static org.apache.hadoop.hbase.tmpl.master.AssignmentManagerStatusTmpl.ImplData __jamon_setOptionalArguments(org.apache.hadoop.hbase.tmpl.master.AssignmentManagerStatusTmpl.ImplData p_implData)
  {
    if(! p_implData.getLimit__IsNotDefault())
    {
      p_implData.setLimit(100);
    }
    return p_implData;
  }
  public AssignmentManagerStatusTmplImpl(org.jamon.TemplateManager p_templateManager, org.apache.hadoop.hbase.tmpl.master.AssignmentManagerStatusTmpl.ImplData p_implData)
  {
    super(p_templateManager, __jamon_setOptionalArguments(p_implData));
    assignmentManager = p_implData.getAssignmentManager();
    limit = p_implData.getLimit();
  }
  
  public void renderNoFlush(@SuppressWarnings({"unused","hiding"}) final java.io.Writer jamonWriter)
    throws java.io.IOException
  {
    // 31, 1
    
Map<String, RegionState> rit = assignmentManager.getRegionsInTransition();

int toRemove = rit.size() - limit;
int removed = 0;
if (toRemove > 0) {
  // getRegionsInTransition returned a copy, so we can mutate it
  for (Iterator<Map.Entry<String, RegionState>> it = rit.entrySet().iterator();
       it.hasNext() && toRemove > 0;
       ) {
    Map.Entry<String, RegionState> e = it.next();
    if (HRegionInfo.FIRST_META_REGIONINFO.getEncodedName().equals(
          e.getKey()) ||
        HRegionInfo.ROOT_REGIONINFO.getEncodedName().equals(
          e.getKey())) {
      // don't remove the meta regions, they're too interesting!
      continue;
    } 
    it.remove();
    toRemove--;
    removed++;
  }
}


    // 57, 1
    jamonWriter.write("<h2>Regions in Transition</h2>\n");
    // 58, 1
    if (rit.isEmpty() )
    {
      // 58, 22
      jamonWriter.write("\nNo regions in transition.\n");
    }
    // 60, 1
    else
    {
      // 60, 8
      jamonWriter.write("\n\t<table>\n\t\t<tr><th>Region</th><th>State</th></tr>\n\t\t");
      // 63, 3
      for (Map.Entry<String, RegionState> entry : rit.entrySet() )
      {
        // 63, 65
        jamonWriter.write("\n\t\t<tr><td>");
        // 64, 11
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(entry.getKey()), jamonWriter);
        // 64, 31
        jamonWriter.write("</td><td>");
        // 64, 40
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(entry.getValue().toDescriptiveString()), jamonWriter);
        // 64, 84
        jamonWriter.write("</td>\n\t\t");
      }
      // 65, 10
      jamonWriter.write("\n\t</table>\n\t");
      // 67, 2
      if (removed > 0 )
      {
        // 67, 21
        jamonWriter.write("\n\t(");
        // 68, 3
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(removed), jamonWriter);
        // 68, 16
        jamonWriter.write(" more regions in transition not shown) \n\t");
      }
      // 69, 8
      jamonWriter.write("\n");
    }
  }
  
  
}
