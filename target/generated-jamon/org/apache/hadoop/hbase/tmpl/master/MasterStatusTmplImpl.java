// Autogenerated Jamon implementation
// /Users/algarecu/Documents/workspace/hbase-workspace/hbase-0.94.8-latest/src/main/jamon/org/apache/hadoop/hbase/tmpl/master/MasterStatusTmpl.jamon

package org.apache.hadoop.hbase.tmpl.master;

// 33, 1
import java.util.*;
// 34, 1
import org.apache.hadoop.util.StringUtils;
// 35, 1
import org.apache.hadoop.hbase.util.Bytes;
// 36, 1
import org.apache.hadoop.hbase.util.JvmVersion;
// 37, 1
import org.apache.hadoop.hbase.util.FSUtils;
// 38, 1
import org.apache.hadoop.hbase.master.HMaster;
// 39, 1
import org.apache.hadoop.hbase.HConstants;
// 40, 1
import org.apache.hadoop.hbase.HServerLoad;
// 41, 1
import org.apache.hadoop.hbase.ServerName;
// 42, 1
import org.apache.hadoop.hbase.client.HBaseAdmin;
// 43, 1
import org.apache.hadoop.hbase.client.HConnectionManager;
// 44, 1
import org.apache.hadoop.hbase.HTableDescriptor;
// 45, 1
import org.apache.hadoop.hbase.HBaseConfiguration;
// 46, 1
import org.apache.hadoop.hbase.protobuf.generated.HBaseProtos.SnapshotDescription;

public class MasterStatusTmplImpl
  extends org.jamon.AbstractTemplateImpl
  implements org.apache.hadoop.hbase.tmpl.master.MasterStatusTmpl.Intf

{
  private final HMaster master;
  private final HBaseAdmin admin;
  private final Map<String,Integer> frags;
  private final ServerName metaLocation;
  private final ServerName rootLocation;
  private final String filter;
  private final Set<ServerName> deadServers;
  private final boolean showAppendWarning;
  private final List<ServerName> servers;
  private final String format;
  protected static org.apache.hadoop.hbase.tmpl.master.MasterStatusTmpl.ImplData __jamon_setOptionalArguments(org.apache.hadoop.hbase.tmpl.master.MasterStatusTmpl.ImplData p_implData)
  {
    if(! p_implData.getFrags__IsNotDefault())
    {
      p_implData.setFrags(null);
    }
    if(! p_implData.getMetaLocation__IsNotDefault())
    {
      p_implData.setMetaLocation(null);
    }
    if(! p_implData.getRootLocation__IsNotDefault())
    {
      p_implData.setRootLocation(null);
    }
    if(! p_implData.getFilter__IsNotDefault())
    {
      p_implData.setFilter("general");
    }
    if(! p_implData.getDeadServers__IsNotDefault())
    {
      p_implData.setDeadServers(null);
    }
    if(! p_implData.getShowAppendWarning__IsNotDefault())
    {
      p_implData.setShowAppendWarning(false);
    }
    if(! p_implData.getServers__IsNotDefault())
    {
      p_implData.setServers(null);
    }
    if(! p_implData.getFormat__IsNotDefault())
    {
      p_implData.setFormat("html");
    }
    return p_implData;
  }
  public MasterStatusTmplImpl(org.jamon.TemplateManager p_templateManager, org.apache.hadoop.hbase.tmpl.master.MasterStatusTmpl.ImplData p_implData)
  {
    super(p_templateManager, __jamon_setOptionalArguments(p_implData));
    master = p_implData.getMaster();
    admin = p_implData.getAdmin();
    frags = p_implData.getFrags();
    metaLocation = p_implData.getMetaLocation();
    rootLocation = p_implData.getRootLocation();
    filter = p_implData.getFilter();
    deadServers = p_implData.getDeadServers();
    showAppendWarning = p_implData.getShowAppendWarning();
    servers = p_implData.getServers();
    format = p_implData.getFormat();
  }
  
  public void renderNoFlush(@SuppressWarnings({"unused","hiding"}) final java.io.Writer jamonWriter)
    throws java.io.IOException
  {
    // 48, 1
    if (format.equals("json") )
    {
      // 48, 30
      jamonWriter.write("\n  ");
      // 49, 3
      {
        org.apache.hadoop.hbase.tmpl.common.TaskMonitorTmpl __jamon__var_2 = new org.apache.hadoop.hbase.tmpl.common.TaskMonitorTmpl(this.getTemplateManager());
        __jamon__var_2.setFormat("json" );
        __jamon__var_2.setFilter(filter);
        __jamon__var_2.renderNoFlush(jamonWriter);
      }
      // 49, 68
      jamonWriter.write("\n  ");
      // 50, 3
      return; 
    }
    // 51, 7
    jamonWriter.write("\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!-- Commenting out DOCTYPE so our blue outline shows on hadoop 0.20.205.0, etc.\n     See tail of HBASE-2110 for explaination.\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \n  \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"> \n-->\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head><meta http-equiv=\"Content-Type\" content=\"text/html;charset=UTF-8\"/>\n<title>HBase Master: ");
    // 60, 22
    org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(master.getServerName()), jamonWriter);
    // 60, 50
    jamonWriter.write("</title>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"/static/hbase.css\" />\n</head>\n<body>\n<a id=\"logo\" href=\"http://wiki.apache.org/lucene-hadoop/Hbase\"><img src=\"/static/hbase_logo.png\" alt=\"HBase Logo\" title=\"HBase Logo\" /></a>\n<h1 id=\"page_title\">Master: ");
    // 65, 29
    org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(master.getServerName().getHostname()), jamonWriter);
    // 65, 71
    jamonWriter.write(":");
    // 65, 72
    org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(master.getServerName().getPort()), jamonWriter);
    // 65, 110
    jamonWriter.write("</h1>\n<p id=\"links_menu\">\n  <a href=\"/logs/\">Local logs</a>,\n  <a href=\"/stacks\">Thread Dump</a>,\n  <a href=\"/logLevel\">Log Level</a>,\n  <a href=\"/dump\">Debug dump</a>,\n");
    // 71, 1
    if (HBaseConfiguration.isShowConfInServlet())
    {
      // 71, 48
      jamonWriter.write("\n  <a href=\"/conf\">HBase Configuration</a>\n");
    }
    // 73, 7
    jamonWriter.write("\n</p>\n\n<!-- Various warnings that cluster admins should be aware of -->\n");
    // 77, 1
    if (JvmVersion.isBadJvmVersion() )
    {
      // 77, 37
      jamonWriter.write("\n  <div class=\"warning\">\n  Your current JVM version ");
      // 79, 28
      org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(System.getProperty("java.version")), jamonWriter);
      // 79, 68
      jamonWriter.write(" is known to be\n  unstable with HBase. Please see the\n  <a href=\"http://wiki.apache.org/hadoop/Hbase/Troubleshooting#A18\">HBase wiki</a>\n  for details.\n  </div>\n");
    }
    // 84, 7
    jamonWriter.write("\n");
    // 85, 1
    if (showAppendWarning )
    {
      // 85, 26
      jamonWriter.write(" \n  <div class=\"warning\">\n  You are currently running the HMaster without HDFS append support enabled.\n  This may result in data loss.\n  Please see the <a href=\"http://wiki.apache.org/hadoop/Hbase/HdfsSyncSupport\">HBase wiki</a>\n  for details.\n  </div>\n");
    }
    // 92, 7
    jamonWriter.write("\n\n<hr id=\"head_rule\" />\n<h2>Attributes</h2>\n<table id=\"attributes_table\">\n<tr><th>Attribute Name</th><th>Value</th><th>Description</th></tr>\n<tr><td>HBase Version</td><td>");
    // 98, 31
    org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(org.apache.hadoop.hbase.util.VersionInfo.getVersion()), jamonWriter);
    // 98, 90
    jamonWriter.write(", r");
    // 98, 93
    org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(org.apache.hadoop.hbase.util.VersionInfo.getRevision()), jamonWriter);
    // 98, 153
    jamonWriter.write("</td><td>HBase version and revision</td></tr>\n<tr><td>HBase Compiled</td><td>");
    // 99, 32
    org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(org.apache.hadoop.hbase.util.VersionInfo.getDate()), jamonWriter);
    // 99, 88
    jamonWriter.write(", ");
    // 99, 90
    org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(org.apache.hadoop.hbase.util.VersionInfo.getUser()), jamonWriter);
    // 99, 146
    jamonWriter.write("</td><td>When HBase version was compiled and by whom</td></tr>\n<tr><td>Hadoop Version</td><td>");
    // 100, 32
    org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(org.apache.hadoop.util.VersionInfo.getVersion()), jamonWriter);
    // 100, 85
    jamonWriter.write(", r");
    // 100, 88
    org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(org.apache.hadoop.util.VersionInfo.getRevision()), jamonWriter);
    // 100, 142
    jamonWriter.write("</td><td>Hadoop version and revision</td></tr>\n<tr><td>Hadoop Compiled</td><td>");
    // 101, 33
    org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(org.apache.hadoop.util.VersionInfo.getDate()), jamonWriter);
    // 101, 83
    jamonWriter.write(", ");
    // 101, 85
    org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(org.apache.hadoop.util.VersionInfo.getUser()), jamonWriter);
    // 101, 135
    jamonWriter.write("</td><td>When Hadoop version was compiled and by whom</td></tr>\n<tr><td>HBase Root Directory</td><td>");
    // 102, 38
    org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(FSUtils.getRootDir(master.getConfiguration()).toString()), jamonWriter);
    // 102, 100
    jamonWriter.write("</td><td>Location of HBase home directory</td></tr>\n<tr><td>HBase Cluster ID</td><td>");
    // 103, 34
    org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(master.getClusterId() != null ? master.getClusterId() : "Not set"), jamonWriter);
    // 103, 105
    jamonWriter.write("<td>Unique identifier generated for each HBase cluster</td></tr>\n<tr><td>Load average</td><td>");
    // 104, 30
    org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(StringUtils.limitDecimalTo2(master.getServerManager().getAverageLoad())), jamonWriter);
    // 104, 107
    jamonWriter.write("</td><td>Average number of regions per regionserver. Naive computation.</td></tr>\n");
    // 105, 1
    if (frags != null )
    {
      // 105, 22
      jamonWriter.write("\n        <tr><td>Fragmentation</td><td>");
      // 106, 39
      org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(frags.get("-TOTAL-") != null ? frags.get("-TOTAL-").intValue() + "%" : "n/a"), jamonWriter);
      // 106, 121
      jamonWriter.write("</td><td>Overall fragmentation of all tables, including .META. and -ROOT-.</td></tr>\n");
    }
    // 107, 7
    jamonWriter.write("\n<tr><td>Zookeeper Quorum</td><td>");
    // 108, 34
    org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(master.getZooKeeperWatcher().getQuorum()), jamonWriter);
    // 108, 80
    jamonWriter.write("</td><td>Addresses of all registered ZK servers. For more, see <a href=\"/zk.jsp\">zk dump</a>.</td></tr>\n<tr>\n  <td>\n   Coprocessors</td><td>");
    // 111, 25
    org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(java.util.Arrays.toString(master.getCoprocessors())), jamonWriter);
    // 111, 82
    jamonWriter.write("\n  </td>\n  <td>Coprocessors currently loaded loaded by the master</td>\n</tr>\n<tr><td>HMaster Start Time</td><td>");
    // 115, 36
    org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(new Date(master.getMasterStartTime())), jamonWriter);
    // 115, 79
    jamonWriter.write("</td><td>Date stamp of when this HMaster was started</td></tr>\n<tr><td>HMaster Active Time</td><td>");
    // 116, 37
    org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(new Date(master.getMasterActiveTime())), jamonWriter);
    // 116, 81
    jamonWriter.write("</td><td>Date stamp of when this HMaster became active</td></tr>\n</table>\n\n");
    // 119, 1
    {
      org.apache.hadoop.hbase.tmpl.common.TaskMonitorTmpl __jamon__var_3 = new org.apache.hadoop.hbase.tmpl.common.TaskMonitorTmpl(this.getTemplateManager());
      __jamon__var_3.setFilter(filter );
      __jamon__var_3.renderNoFlush(jamonWriter);
    }
    // 119, 49
    jamonWriter.write("\n\n");
    // 121, 1
    if ((rootLocation != null) )
    {
      // 121, 31
      jamonWriter.write("\n");
      // 122, 1
      {
        // 122, 1
        __jamon_innerUnit__catalogTables(jamonWriter);
      }
      // 122, 20
      jamonWriter.write("\n");
    }
    // 123, 7
    jamonWriter.write("\n");
    // 124, 1
    if ((metaLocation != null) )
    {
      // 124, 31
      jamonWriter.write("\n");
      // 125, 1
      {
        // 125, 1
        __jamon_innerUnit__userTables(jamonWriter);
      }
      // 125, 17
      jamonWriter.write("\n");
    }
    // 126, 7
    jamonWriter.write("\n");
    // 127, 1
    {
      // 127, 1
      __jamon_innerUnit__userSnapshots(jamonWriter);
    }
    // 127, 20
    jamonWriter.write("\n");
    // 128, 1
    if ((servers != null) )
    {
      // 128, 26
      jamonWriter.write("\n");
      // 129, 1
      {
        // 129, 1
        __jamon_innerUnit__regionServers(jamonWriter);
      }
      // 129, 20
      jamonWriter.write("\n");
    }
    // 130, 7
    jamonWriter.write("\n");
    // 131, 1
    if ((deadServers != null) )
    {
      // 131, 30
      jamonWriter.write("\n");
      // 132, 1
      {
        // 132, 1
        __jamon_innerUnit__deadRegionServers(jamonWriter);
      }
      // 132, 24
      jamonWriter.write("\n");
    }
    // 133, 7
    jamonWriter.write("\n\n");
    // 135, 1
    {
      org.apache.hadoop.hbase.tmpl.master.AssignmentManagerStatusTmpl __jamon__var_4 = new org.apache.hadoop.hbase.tmpl.master.AssignmentManagerStatusTmpl(this.getTemplateManager());
      __jamon__var_4.renderNoFlush(jamonWriter, master.getAssignmentManager());
    }
    // 135, 82
    jamonWriter.write("\n\n</body>\n</html>\n\n\n");
    // 285, 1
    
   HConnectionManager.deleteConnection(admin.getConfiguration(), false);

  }
  
  
  // 201, 1
  private void __jamon_innerUnit__userSnapshots(@SuppressWarnings({"unused","hiding"}) final java.io.Writer jamonWriter)
    throws java.io.IOException
  {
    // 202, 1
    
   List<SnapshotDescription> snapshots = admin.listSnapshots();

    // 205, 1
    if ((snapshots != null && snapshots.size() > 0))
    {
      // 205, 51
      jamonWriter.write("\n<table>\n<tr>\n    <th>Snapshot</th>\n    <th>Table</th>\n    <th>Creation Time</th>\n    <th>Type</th>\n</tr>\n");
      // 213, 1
      for (SnapshotDescription snapshotDesc : snapshots)
      {
        // 213, 53
        jamonWriter.write("\n<tr>\n    <td><a href=\"snapshot.jsp?name=");
        // 215, 36
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(snapshotDesc.getName()), jamonWriter);
        // 215, 64
        jamonWriter.write("\">");
        // 215, 66
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(snapshotDesc.getName()), jamonWriter);
        // 215, 94
        jamonWriter.write("</a></td>\n    <td><a href=\"table.jsp?name=");
        // 216, 33
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(snapshotDesc.getTable()), jamonWriter);
        // 216, 62
        jamonWriter.write("\">");
        // 216, 64
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(snapshotDesc.getTable()), jamonWriter);
        // 216, 93
        jamonWriter.write("</a></td>\n    <td>");
        // 217, 9
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(new Date(snapshotDesc.getCreationTime())), jamonWriter);
        // 217, 55
        jamonWriter.write("</td>\n    <td>");
        // 218, 9
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(snapshotDesc.getType()), jamonWriter);
        // 218, 37
        jamonWriter.write("</td>\n</tr>\n");
      }
      // 220, 8
      jamonWriter.write("\n\n<p> ");
      // 222, 5
      org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(snapshots.size()), jamonWriter);
      // 222, 27
      jamonWriter.write(" snapshot(s) in set.</p>\n</table>\n");
    }
    // 224, 7
    jamonWriter.write("\n");
  }
  
  
  // 141, 1
  private void __jamon_innerUnit__catalogTables(@SuppressWarnings({"unused","hiding"}) final java.io.Writer jamonWriter)
    throws java.io.IOException
  {
    // 142, 1
    jamonWriter.write("<h2>Tables</h2>\n<table>\n<tr>\n    <th>Catalog Table</th>\n    ");
    // 146, 5
    if ((frags != null) )
    {
      // 146, 28
      jamonWriter.write("\n        <th title=\"Fragmentation - Will be 0% after a major compaction and fluctuate during normal usage.\">Frag.</th>\n    ");
    }
    // 148, 11
    jamonWriter.write("\n    <th>Description</th>\n</tr>\n<tr>\n    <td><a href=\"table.jsp?name=");
    // 152, 33
    org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(Bytes.toString(HConstants.ROOT_TABLE_NAME)), jamonWriter);
    // 152, 81
    jamonWriter.write("\">");
    // 152, 83
    org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(Bytes.toString(HConstants.ROOT_TABLE_NAME)), jamonWriter);
    // 152, 131
    jamonWriter.write("</a></td>\n  ");
    // 153, 3
    if ((frags != null))
    {
      // 153, 25
      jamonWriter.write("\n        <td align=\"center\">");
      // 154, 28
      org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(frags.get("-ROOT-") != null ? frags.get("-ROOT-").intValue() + "%" : "n/a"), jamonWriter);
      // 154, 108
      jamonWriter.write("</td>\n  ");
    }
    // 155, 9
    jamonWriter.write("\n    <td>The -ROOT- table holds references to all .META. regions.</td>\n</tr>\n  ");
    // 158, 3
    if ((metaLocation != null) )
    {
      // 158, 33
      jamonWriter.write("\n<tr>\n    <td><a href=\"table.jsp?name=");
      // 160, 33
      org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(Bytes.toString(HConstants.META_TABLE_NAME)), jamonWriter);
      // 160, 81
      jamonWriter.write("\">");
      // 160, 83
      org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(Bytes.toString(HConstants.META_TABLE_NAME)), jamonWriter);
      // 160, 131
      jamonWriter.write("</a></td>\n    ");
      // 161, 5
      if ((frags != null))
      {
        // 161, 27
        jamonWriter.write("\n        <td align=\"center\">");
        // 162, 28
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(frags.get(".META.") != null ? frags.get(".META.").intValue() + "%" : "n/a"), jamonWriter);
        // 162, 108
        jamonWriter.write("</td>\n    ");
      }
      // 163, 11
      jamonWriter.write("\n    <td>The .META. table holds references to all User Table regions</td>\n</tr>\n  \n  ");
    }
    // 167, 9
    jamonWriter.write("\n</table>\n");
  }
  
  
  // 171, 1
  private void __jamon_innerUnit__userTables(@SuppressWarnings({"unused","hiding"}) final java.io.Writer jamonWriter)
    throws java.io.IOException
  {
    // 172, 1
    
   HTableDescriptor[] tables = admin.listTables();

    // 175, 1
    if ((tables != null && tables.length > 0))
    {
      // 175, 45
      jamonWriter.write("\n<table>\n<tr>\n    <th>User Table</th>\n");
      // 179, 1
      if ((frags != null) )
      {
        // 179, 24
        jamonWriter.write("\n        <th title=\"Fragmentation - Will be 0% after a major compaction and fluctuate during normal usage.\">Frag.</th>\n");
      }
      // 181, 7
      jamonWriter.write("\n    <th>Online Regions</th>\n    <th>Description</th>\n</tr>\n");
      // 185, 1
      for (HTableDescriptor htDesc : tables)
      {
        // 185, 41
        jamonWriter.write("\n<tr>\n    <td><a href=table.jsp?name=");
        // 187, 32
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(htDesc.getNameAsString()), jamonWriter);
        // 187, 62
        jamonWriter.write(">");
        // 187, 63
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(htDesc.getNameAsString()), jamonWriter);
        // 187, 93
        jamonWriter.write("</a> </td>\n    ");
        // 188, 5
        if ((frags != null) )
        {
          // 188, 28
          jamonWriter.write("\n        <td align=\"center\">");
          // 189, 28
          org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(frags.get(htDesc.getNameAsString()) != null ? frags.get(htDesc.getNameAsString()).intValue() + "%" : "n/a"), jamonWriter);
          // 189, 140
          jamonWriter.write("</td>\n    ");
        }
        // 190, 11
        jamonWriter.write("\n    <td>");
        // 191, 9
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(master.getAssignmentManager().getRegionsOfTable(htDesc.getName()).size()), jamonWriter);
        // 191, 87
        jamonWriter.write("\n    <td>");
        // 192, 9
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(htDesc.toStringCustomizedValues()), jamonWriter);
        // 192, 48
        jamonWriter.write("</td>\n</tr>\n");
      }
      // 194, 8
      jamonWriter.write("\n\n<p> ");
      // 196, 5
      org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(tables.length), jamonWriter);
      // 196, 24
      jamonWriter.write(" table(s) in set. [<a href=tablesDetailed.jsp>Details</a>]</p>\n</table>\n");
    }
    // 198, 7
    jamonWriter.write("\n");
  }
  
  
  // 227, 1
  private void __jamon_innerUnit__regionServers(@SuppressWarnings({"unused","hiding"}) final java.io.Writer jamonWriter)
    throws java.io.IOException
  {
    // 228, 1
    jamonWriter.write("<h2>Region Servers</h2>\n");
    // 229, 1
    if ((servers != null && servers.size() > 0))
    {
      // 229, 47
      jamonWriter.write("\n");
      // 230, 1
      
     int totalRegions = 0;
     int totalRequests = 0; 

      // 235, 1
      jamonWriter.write("<table>\n<tr><th rowspan=\"");
      // 236, 18
      org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(servers.size() + 1), jamonWriter);
      // 236, 41
      jamonWriter.write("\"></th><th>ServerName</th><th>Start time</th><th>Load</th></tr>\n");
      // 237, 1
      
   ServerName [] serverNames = servers.toArray(new ServerName[servers.size()]);
     Arrays.sort(serverNames);
     for (ServerName serverName: serverNames) {
       // TODO: this is incorrect since this conf might differ from RS to RS
       // or be set to 0 to get ephemeral ports
       int infoPort = master.getConfiguration().getInt("hbase.regionserver.info.port", 60030);
       String url = "http://" + serverName.getHostname() + ":" + infoPort + "/";
       HServerLoad hsl = master.getServerManager().getLoad(serverName);
       String loadStr = hsl == null? "-": hsl.toString();
       if (hsl != null) {
         totalRegions += hsl.getNumberOfRegions();
         totalRequests += hsl.getNumberOfRequests();
       }
       long startcode = serverName.getStartcode();

      // 253, 1
      jamonWriter.write("<tr><td><a href=\"");
      // 253, 18
      org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(url), jamonWriter);
      // 253, 27
      jamonWriter.write("\">");
      // 253, 29
      org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(serverName), jamonWriter);
      // 253, 45
      jamonWriter.write("</a></td><td>");
      // 253, 58
      org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(new Date(startcode)), jamonWriter);
      // 253, 83
      jamonWriter.write("</td><td>");
      // 253, 92
      org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(loadStr), jamonWriter);
      // 253, 105
      jamonWriter.write("</td></tr>\n");
      // 254, 1
      
    }

      // 257, 1
      jamonWriter.write("<tr><th>Total: </th><td>servers: ");
      // 257, 34
      org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(servers.size()), jamonWriter);
      // 257, 54
      jamonWriter.write("</td><td></td><td>requestsPerSecond=");
      // 257, 90
      org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(totalRequests), jamonWriter);
      // 257, 109
      jamonWriter.write(", numberOfOnlineRegions=");
      // 257, 133
      org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(totalRegions), jamonWriter);
      // 257, 151
      jamonWriter.write("</td></tr>\n</table>\n\n<p>Load is requests per second and count of regions loaded</p>\n");
    }
    // 261, 7
    jamonWriter.write("\n");
  }
  
  
  // 264, 1
  private void __jamon_innerUnit__deadRegionServers(@SuppressWarnings({"unused","hiding"}) final java.io.Writer jamonWriter)
    throws java.io.IOException
  {
    // 265, 1
    jamonWriter.write("<h3>Dead Region Servers</h3>\n");
    // 266, 1
    if ((deadServers != null && deadServers.size() > 0))
    {
      // 266, 55
      jamonWriter.write("\n\n<table>\n<tr><th rowspan=\"");
      // 269, 18
      org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(deadServers.size() + 1), jamonWriter);
      // 269, 45
      jamonWriter.write("\"></th><th>ServerName</th></tr>\n");
      // 270, 1
      
   ServerName [] deadServerNames = deadServers.toArray(new ServerName[deadServers.size()]);
     Arrays.sort(deadServerNames);
     for (ServerName deadServerName: deadServerNames) {
       int infoPort = master.getConfiguration().getInt("hbase.regionserver.info.port", 60030);

      // 276, 1
      jamonWriter.write("<tr><td>");
      // 276, 9
      org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(deadServerName), jamonWriter);
      // 276, 29
      jamonWriter.write("</td></tr>\n");
      // 277, 1
      
    }

      // 280, 1
      jamonWriter.write("<tr><th>Total: </th><td>servers: ");
      // 280, 34
      org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(deadServers.size()), jamonWriter);
      // 280, 58
      jamonWriter.write("</td></tr>\n</table>\n");
    }
    // 282, 7
    jamonWriter.write("\n");
  }
  
  
}
